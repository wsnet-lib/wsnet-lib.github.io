(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{73:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return o})),r.d(n,"metadata",(function(){return c})),r.d(n,"toc",(function(){return b})),r.d(n,"default",(function(){return u}));var t=r(3),a=r(7),s=(r(0),r(84)),l=["components"],o={id:"events",title:"Events",sidebar_label:"Events"},c={unversionedId:"api/events",id:"api/events",isDocsHomePage:!1,title:"Events",description:"Using the net_event function, you can register a callback for an event.",source:"@site/docs\\api\\events.md",slug:"/api/events",permalink:"/api/events",editUrl:"https://github.com/wsnet-lib/documentation/docs/api/events.md",version:"current",sidebar_label:"Events",sidebar:"default",previous:{title:"Lobbies",permalink:"/api/lobbies"},next:{title:"Send and receive data",permalink:"/api/messages"}},b=[{value:"Detecting a network disconnection",id:"detecting-a-network-disconnection",children:[]},{value:"Handling errors",id:"handling-errors",children:[]},{value:"Lobby events",id:"lobby-events",children:[]},{value:"Players events",id:"players-events",children:[]}],i={toc:b};function u(e){var n=e.components,r=Object(a.a)(e,l);return Object(s.b)("wrapper",Object(t.a)({},i,r,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Using the ",Object(s.b)("inlineCode",{parentName:"p"},"net_event")," function, you can register a callback for an event."),Object(s.b)("h3",{id:"detecting-a-network-disconnection"},"Detecting a network disconnection"),Object(s.b)("p",null,"You can register an event to detect a disconnection and automatically try to reconnect the player."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.connection_close, function()\n{\n    show_debug_message("Connection closed by the server.");\n    show_message("Connection closed by the server.");\n});\n')),Object(s.b)("hr",null),Object(s.b)("h3",{id:"handling-errors"},"Handling errors"),Object(s.b)("p",null,"To handle errors, you can register a callback for the ",Object(s.b)("inlineCode",{parentName:"p"},"wsnet_evt.error")," event."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.error, function(error_code, error) \n{\n    show_message(string(error_code) + " |" + net_decode_error(error)); \n});\n')),Object(s.b)("p",null,"Error Codes:  ",Object(s.b)("inlineCode",{parentName:"p"},"no_error"),", ",Object(s.b)("inlineCode",{parentName:"p"},"command_not_found"),", ",Object(s.b)("inlineCode",{parentName:"p"},"player_not_found"),", ",Object(s.b)("inlineCode",{parentName:"p"},"lobby_not_found"),", ",Object(s.b)("inlineCode",{parentName:"p"},"unauthorized"),", ",Object(s.b)("inlineCode",{parentName:"p"},"wrong_password"),", ",Object(s.b)("inlineCode",{parentName:"p"},"max_lobby_players"),", ",Object(s.b)("inlineCode",{parentName:"p"},"input_validation_failed"),", ",Object(s.b)("inlineCode",{parentName:"p"},"already_in_lobby"),", ",Object(s.b)("inlineCode",{parentName:"p"},"server_error"),", ",Object(s.b)("inlineCode",{parentName:"p"},"callback_not_found"),", ",Object(s.b)("inlineCode",{parentName:"p"},"incorrect_type")),Object(s.b)("hr",null),Object(s.b)("h3",{id:"lobby-events"},"Lobby events"),Object(s.b)("p",null,"Receive a response from the server saying if your lobby has been created or not."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_create, function (success, lobby_id) \n{\n    if(success)\n    {\n        show_debug_message("created lobby: " + string(lobby_id));\n    }\n    else\n    {\n        show_debug_message("Error creating lobby: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if your successfully joined a lobby."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_join, function (success)\n{\n    if(success)\n    {\n        show_debug_message ( \n            "[JOINED] lobby id: " + string(global.net_lobby_id) + ", " +\n            "player id: " + string(global.net_player_id)\n        );\n    }\n    else\n    {\n        show_debug_message("Error, can\'t join:  " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server with the lobbies list (stored in ",Object(s.b)("inlineCode",{parentName:"p"},"global.net_lobbies"),")."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"net_event(wsnet_evt.lobby_get_list, function()\n{\n    var lobbies = global.net_lobbies;\n\n    var sz = ds_list_size(lobbies);\n    for(var i = 0; i < sz; i++)\n    {\n        var lobby = lobbies[| i];\n        //var lobby_id = lobby[0];\n        //var lobby_name = lobby[1];\n        //var lobby_players = lobby[2];\n        //var lobby_max_players = lobby[3];\n        //var lobby_has_password = lobby[4];\n    \n        show_debug_message(lobby);\n    }\n});\n")),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if you left the lobby successfully."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_leave, function (success)\n{\n    if(success)\n    {\n        show_debug_message("lobby left successfully");\n    }\n    else\n    {\n        show_debug_message("Error, can\'t leave: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if the ",Object(s.b)("inlineCode",{parentName:"p"},"Allow Join")," flag has been updated successfully."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_allow_join, function(success, allow) \n{\n    if(success)\n    { \n        show_debug_message("Lobby allow join changed successfully: " + string(allow));\n    }\n    else\n    {\n        show_debug_message("Error, can\'t change allow join: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if the max number of players that can join has been updated successfully."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_max_players, function(success, max_players)\n{\n    if(success)\n    {\n        show_debug_message("Max players changed successfully: " + string(max_players));\n    }\n    else\n    {\n        show_debug_message("Error, can\'t change max players: " +net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if the lobby password has been updated successfully."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_password, function(success) \n{\n    if(success)\n    {\n        show_debug_message("Password changed successfully");\n    }\n    else\n    {\n        show_debug_message("Error, can\'t change password: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if the lobby has been transfered to another player successfully."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_transfer, function(success, new_admin_id) \n{\n    if(success)\n    {\n        show_debug_message("Admin transfered to id [" + string(new_admin_id) +"]");\n    }\n    else\n    {\n        show_debug_message("Error, can\'t transfer: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server saying if the player has been unbanned successfully."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_unban, function(success, short_hash) \n{ \n    if(success)\n    {\n        //successfully changed\n        show_debug_message("Player unbanned successfully: " + string(short_hash));\n    }\n    else\n    {\n        show_debug_message("Error, can\'t unban: " +net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a response from the server with the banned player list (Each player is associated to a short hash, that can be used to unban them)"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.lobby_get_banned, function (success, banned_players) \n{\n    if(success)\n    {\n        var sz = array_length(banned_players);\n        var str = "";\n        for(var i = 0; i < sz; i++)\n        {\n            var player = banned_players[i];\n            var shortid = player[0];\n            var player_name = player[1];\n            str += shortid + ": " + player_name + " | ";\n        }\n        show_debug_message(str);\n    }\n    else\n    {\n        show_debug_message("Error, can\'t get banned list: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("h3",{id:"players-events"},"Players events"),Object(s.b)("p",null,"Receive a message from the server saying that a new player joined the lobby."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.player_join, function(player) \n{\n    var player_id = player[0];\n    var player_name = player[1];\n\n    show_debug_message("player joined " + player_name + "["+string(player_id)+"]");\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a message from the server saying that a player left the lobby."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.player_leave, function(player) \n{\n    var _player_id = player[0];\n    var player_name = player[1];\n\n    show_debug_message("player left " + player_name + "["+string(_player_id)+"]");\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a message from the server saying that a player has been kicked or banned from your lobby."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.player_kickban, function(success, player, banned)\n{\n    if(success)\n    {\n        var player_id = player[0];\n        var player_name = player[1];\n    \n        if(banned)\n            show_debug_message("Player banned: " + player_name + "["+string(player_id)+"]");\n        else\n            show_debug_message("Player kicked: " + player_name + "["+string(player_id)+"]");\n    }\n    else\n    {\n        show_debug_message("Error, can\'t kickban: " + net_decode_error(global.net_error_id));\n    }\n});\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Receive a message from the server saying that a player changed username."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},'net_event(wsnet_evt.player_username, function(success, player) \n{\n    if(success)\n    {\n        var player_id = player[0];\n        var player_name = player[1];\n    \n        show_debug_message("player changed name " + player_name + "["+string(player_id)+"]");\n    }\n    else\n    {\n        show_debug_message("Error, can\'t change allow join: " + net_decode_error(global.net_error_id));\n    }\n});\n')))}u.isMDXComponent=!0},84:function(e,n,r){"use strict";r.d(n,"a",(function(){return u})),r.d(n,"b",(function(){return _}));var t=r(0),a=r.n(t);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var b=a.a.createContext({}),i=function(e){var n=a.a.useContext(b),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=i(e.components);return a.a.createElement(b.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),u=i(r),d=t,_=u["".concat(l,".").concat(d)]||u[d]||p[d]||s;return r?a.a.createElement(_,o(o({ref:n},b),{},{components:r})):a.a.createElement(_,o({ref:n},b))}));function _(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,l=new Array(s);l[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:t,l[1]=o;for(var b=2;b<s;b++)l[b]=r[b];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);